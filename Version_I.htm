<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WizardOS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #1a1a1a;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden; /* Prevent scrollbars */
        }
        .game-container {
            position: relative;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2), 0 6px 6px rgba(0,0,0,0.25);
            border-radius: 8px;
        }
        canvas {
            background-color: #2c3e50;
            border-radius: 8px;
            display: block; /* Removes bottom margin */
        }
        #titleScreen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(44, 62, 80, 0.95);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #ecf0f1;
            font-family: 'Press Start 2P', cursive;
            border-radius: 8px;
            z-index: 10;
        }
        #titleScreen h1 {
            font-size: 3rem;
            text-shadow: 3px 3px 0px #c0392b;
            margin-bottom: 2rem;
        }
        #startButton {
            font-family: 'Press Start 2P', cursive;
            background-color: #27ae60;
            color: white;
            padding: 1rem 2rem;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
            box-shadow: 0 4px #2ecc71;
        }
        #startButton:hover {
            background-color: #2ecc71;
        }
        #startButton:active {
            transform: translateY(2px);
            box-shadow: 0 2px #2ecc71;
        }
        .controls {
            color: #ecf0f1;
            margin-top: 20px;
            text-align: center;
            font-family: 'Courier New', Courier, monospace;
        }
        .controls p {
            margin: 0.25rem 0;
        }
    </style>
</head>
<body class="flex flex-col justify-center items-center">
    <div class="game-container" id="gameContainer">
        <div id="titleScreen">
            <h1>WizardOS</h1>
            <button id="startButton">Begin Adventure</button>
        </div>
        <canvas id="gameCanvas"></canvas>
    </div>
    <div class="controls hidden">
        <p><kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">←</kbd> / <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">→</kbd> : Move | <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">Space</kbd> : Jump</p>
        <p>
            <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">Z</kbd>: Fire (Hold) |
            <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">X</kbd>: Water (Hold) |
            <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">C</kbd>: Earth |
            <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">V</kbd>: Air
        </p>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const titleScreen = document.getElementById('titleScreen');
        const startButton = document.getElementById('startButton');
        const controlsDiv = document.querySelector('.controls');
        const gameContainer = document.getElementById('gameContainer');

        // --- Game Configuration ---
        const GAME_WIDTH = 800;
        const GAME_HEIGHT = 600;
        canvas.width = GAME_WIDTH;
        canvas.height = GAME_HEIGHT;
        gameContainer.style.width = `${GAME_WIDTH}px`;
        gameContainer.style.height = `${GAME_HEIGHT}px`;

        const GROUND_Y = GAME_HEIGHT - 50;
        const GRAVITY = 0.4;

        // --- Input Handler Class ---
        class InputHandler {
            constructor() {
                this.keys = {};
                window.addEventListener('keydown', e => { this.keys[e.key] = true; });
                window.addEventListener('keyup', e => { this.keys[e.key] = false; });
            }
        }

        // --- Particle Class ---
        class Particle {
            constructor(x, y, vx, vy, life, color, size, gravity, behavior) {
                this.x = x;
                this.y = y;
                this.vx = vx;
                this.vy = vy;
                this.life = life;
                this.maxLife = life;
                this.color = color;
                this.size = size;
                this.gravity = gravity;
                this.behavior = behavior; // 'default', 'flicker', 'flutter', 'roll'
                this.bounces = 0;
            }

            update() {
                this.life--;
                this.x += this.vx;
                this.y += this.vy;
                this.vy += this.gravity;

                // Ground collision
                if (this.y + this.size > GROUND_Y) {
                    this.y = GROUND_Y - this.size;
                    if (this.behavior === 'roll' && this.bounces < 2) {
                        this.vy *= -0.4; // Bounce
                        this.vx *= 0.8; // Friction
                        this.bounces++;
                    } else {
                        this.vy = 0;
                        this.vx *= 0.7; // Friction
                    }
                }
                
                // Behavior-specific updates
                if (this.behavior === 'flutter') {
                    this.x += (Math.random() - 0.5) * 2;
                }
            }

            draw(ctx) {
                let alpha = this.life / this.maxLife;
                if (this.behavior === 'flicker') {
                    alpha *= Math.random() * 0.5 + 0.5;
                }
                ctx.globalAlpha = alpha;
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.size, this.size);
                ctx.globalAlpha = 1.0;
            }
        }

        // --- Wizard Class ---
        class Wizard {
            constructor(game) {
                this.game = game;
                this.width = 50;
                this.height = 80;
                this.x = 100;
                this.y = GROUND_Y - this.height;
                this.speed = 5;
                this.velocityY = 0;
                this.jumpStrength = -15;
                this.isJumping = false;
                this.direction = 1;
                this.lastSingleShotTime = 0;
                this.singleShotCooldown = 400; // Cooldown for single-shot spells
            }
            update(input) {
                // Movement
                if (input.keys['ArrowRight']) {
                    this.x += this.speed;
                    this.direction = 1;
                } else if (input.keys['ArrowLeft']) {
                    this.x -= this.speed;
                    this.direction = -1;
                }
                // Jumping
                if (input.keys[' '] && !this.isJumping) {
                    this.velocityY = this.jumpStrength;
                    this.isJumping = true;
                }

                // --- Spell Casting Logic ---
                const currentTime = Date.now();

                // Continuous Spells (no cooldown, cast while key is held)
                if (input.keys['z']) this.castSpell('fire');
                if (input.keys['x']) this.castSpell('water');
                
                // Single-Shot Spells (cast on key press with cooldown)
                if (input.keys['c'] && currentTime - this.lastSingleShotTime > this.singleShotCooldown) {
                    this.castSpell('earth');
                    this.lastSingleShotTime = currentTime;
                }
                if (input.keys['v'] && currentTime - this.lastSingleShotTime > this.singleShotCooldown) {
                    this.castSpell('air');
                    this.lastSingleShotTime = currentTime;
                }
                
                // Physics and Boundaries
                this.y += this.velocityY;
                this.velocityY += GRAVITY;
                if (this.y + this.height > GROUND_Y) {
                    this.y = GROUND_Y - this.height;
                    this.velocityY = 0;
                    this.isJumping = false;
                }
                if (this.x < 0) this.x = 0;
                if (this.x + this.width > this.game.width) this.x = this.game.width - this.width;
            }
            draw(ctx) {
                // Staff
                ctx.fillStyle = '#8B4513';
                const staffX = this.direction === 1 ? this.x + this.width - 5 : this.x - 5;
                ctx.fillRect(staffX, this.y - 10, 10, this.height + 10);
                // Staff Orb
                ctx.beginPath();
                ctx.arc(staffX + 5, this.y - 15, 8, 0, Math.PI * 2);
                ctx.fillStyle = '#4169E1';
                ctx.fill();
                // Robe
                ctx.fillStyle = '#483D8B';
                ctx.beginPath();
                ctx.moveTo(this.x, this.y + this.height);
                ctx.lineTo(this.x + this.width, this.y + this.height);
                ctx.lineTo(this.x + this.width * 0.75, this.y + this.height * 0.2);
                ctx.lineTo(this.x + this.width * 0.25, this.y + this.height * 0.2);
                ctx.closePath();
                ctx.fill();
                // Head
                ctx.fillStyle = '#F5DEB3';
                ctx.beginPath();
                ctx.arc(this.x + this.width / 2, this.y + 15, 15, 0, Math.PI * 2);
                ctx.fill();
                // Beard
                ctx.fillStyle = '#FFFFFF';
                ctx.beginPath();
                ctx.moveTo(this.x + this.width / 2 - 12, this.y + 18);
                ctx.lineTo(this.x + this.width / 2 + 12, this.y + 18);
                ctx.lineTo(this.x + this.width / 2, this.y + 45);
                ctx.closePath();
                ctx.fill();
                // Hat
                ctx.fillStyle = '#6A5ACD';
                ctx.beginPath();
                ctx.moveTo(this.x + this.width / 2, this.y - 20);
                ctx.lineTo(this.x + this.width / 2 - 25, this.y + 10);
                ctx.lineTo(this.x + this.width / 2 + 25, this.y + 10);
                ctx.closePath();
                ctx.fill();
            }
            castSpell(spellType) {
                const staffTipX = this.direction === 1 ? this.x + this.width + 5 : this.x - 5;
                const staffTipY = this.y - 15;

                switch(spellType) {
                    case 'water':
                        // Continuous stream - fewer particles per frame, but called every frame
                        for (let i = 0; i < 5; i++) {
                            const speed = Math.random() * 5 + 5;
                            const angle = (Math.random() - 0.5) * 0.5;
                            const vx = Math.cos(angle) * speed * this.direction;
                            const vy = Math.sin(angle) * speed;
                            this.game.particles.push(new Particle(staffTipX, staffTipY, vx, vy, 150, '#87CEFA', 4, GRAVITY, 'default'));
                        }
                        break;
                    case 'fire':
                        // Continuous stream
                        for (let i = 0; i < 4; i++) {
                            const speed = Math.random() * 6 + 6;
                            const angle = (Math.random() - 0.5) * 0.3;
                            const vx = Math.cos(angle) * speed * this.direction;
                            const vy = Math.sin(angle) * speed;
                            this.game.particles.push(new Particle(staffTipX, staffTipY, vx, vy, 60, '#FF4500', 5, -0.1, 'flicker'));
                        }
                        break;
                    case 'earth':
                        // Single shot
                        const vxEarth = 12 * this.direction;
                        const vyEarth = -8;
                        this.game.particles.push(new Particle(staffTipX, staffTipY, vxEarth, vyEarth, 200, '#8B4513', 15, GRAVITY * 1.5, 'roll'));
                        break;
                    case 'air':
                        // Single shot
                        for (let i = 0; i < 30; i++) {
                            const speed = Math.random() * 8 + 2;
                            const angle = (Math.random() - 0.5) * Math.PI * 0.5;
                            const vx = Math.cos(angle) * speed * this.direction;
                            const vy = Math.sin(angle) * speed;
                            this.game.particles.push(new Particle(staffTipX, staffTipY, vx, vy, 80, '#F5F5F5', 4, 0, 'flutter'));
                        }
                        break;
                }
            }
        }

        // --- Game Class ---
        class Game {
            constructor(width, height) {
                this.width = width;
                this.height = height;
                this.gameState = 'TITLE';
                this.input = new InputHandler();
                this.player = new Wizard(this);
                this.particles = [];
            }
            update() {
                if (this.gameState !== 'PLAYING') return;
                this.player.update(this.input);
                // Update particles and remove dead ones
                this.particles = this.particles.filter(p => {
                    p.update();
                    return p.life > 0;
                });
            }
            draw(ctx) {
                // Draw ground
                ctx.fillStyle = '#2c522c';
                ctx.fillRect(0, GROUND_Y, this.width, GAME_HEIGHT - GROUND_Y);
                // Draw player and particles
                this.player.draw(ctx);
                this.particles.forEach(p => p.draw(ctx));
            }
        }

        // --- Main Game Logic ---
        const game = new Game(GAME_WIDTH, GAME_HEIGHT);

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            game.update();
            if (game.gameState === 'PLAYING') {
                game.draw(ctx);
            }
            requestAnimationFrame(animate);
        }

        startButton.addEventListener('click', () => {
            titleScreen.style.display = 'none';
            controlsDiv.classList.remove('hidden');
            game.gameState = 'PLAYING';
        });

        animate();
    </script>
</body>
</html>
